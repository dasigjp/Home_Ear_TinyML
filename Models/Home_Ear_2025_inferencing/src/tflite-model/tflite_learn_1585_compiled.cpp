/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.03.2025 23:17:31

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 32
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 10528;
#else
constexpr int kTensorArenaSize = 9504;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_PAD, OP_CONCATENATION, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 5;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 5;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant0_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<2, int> tensor_dimension1 = { 2, { 1,4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant1_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension3 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant3_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant3_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 0, -34, 0, 0, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension7 = { 4, { 1,15,13,1 } };
const TfArray<1, float> quant7_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant7_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 127, -106, 15, 
  /* [0][1][][] */ 79, -119, 62, 
  /* [0][2][][] */ 105, -111, 3, 
  /* [1][0][][] */ -44, 101, -57, 
  /* [1][1][][] */ 73, -127, 58, 
  /* [1][2][][] */ -13, 31, -6, 
  /* [2][0][][] */ -83, 116, -82, 
  /* [2][1][][] */ -70, 127, -92, 
  /* [2][2][][] */ -48, 112, -85, 
  /* [3][0][][] */ -83, -99, 5, 
  /* [3][1][][] */ 127, 105, -47, 
  /* [3][2][][] */ -19, -4, 15, 
  /* [4][0][][] */ 61, -61, 45, 
  /* [4][1][][] */ 30, -54, 27, 
  /* [4][2][][] */ -75, 127, -68, 
  /* [5][0][][] */ 119, 67, -80, 
  /* [5][1][][] */ 127, 88, -70, 
  /* [5][2][][] */ 96, 72, -69, 
  /* [6][0][][] */ 0, -127, -111, 
  /* [6][1][][] */ -25, -116, -102, 
  /* [6][2][][] */ -31, -112, -87, 
  /* [7][0][][] */ 127, 86, 96, 
  /* [7][1][][] */ 99, 63, 109, 
  /* [7][2][][] */ 77, 40, 102, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0011299072066321969, 0.0022193391341716051, 0.0012927629286423326, 0.0021403257269412279, 0.0021486436016857624, 0.0011157429544255137, 0.0010800058953464031, 0.0012880736030638218, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[8] = { -5299, -2478, -4777, -2987, -2508, -5019, -4699, -6596, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 7.5681287853512913e-05, 0.00014865153934806585, 8.6589381680823863e-05, 0.00014335921150632203, 0.00014391634613275528, 7.4732568464241922e-05, 7.2338894824497402e-05, 8.6275293142534792e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,15,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,8,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,7,7,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[16*3*3*8] = { 
  /* [0][0][][] */ -8,19,-7,14,15,-46,47,-83, -18,-3,-1,7,6,-10,15,-84, 44,-33,-20,-28,-7,-96,38,-90, 
  /* [0][1][][] */ -12,11,-7,1,8,-41,-10,-101, 2,0,1,-1,-15,-83,48,-127, 8,-18,-13,-35,-24,-102,-6,-120, 
  /* [0][2][][] */ 2,-3,11,14,-1,-8,29,-95, 6,8,-8,1,0,-122,23,-79, 16,-17,-10,-16,-16,-97,24,-83, 
  /* [1][0][][] */ -32,-2,6,-29,53,-23,-9,-127, -15,-4,-6,-40,-6,-18,-5,-44, 10,8,9,-23,6,5,-33,-4, 
  /* [1][1][][] */ 14,-20,35,60,25,8,-6,-37, -1,1,-10,25,-5,-6,-7,-75, 4,0,12,-14,9,-11,-67,-15, 
  /* [1][2][][] */ -12,2,18,81,55,5,-77,38, 15,-6,-9,32,-3,15,-35,-10, 8,3,13,2,15,15,-70,-17, 
  /* [2][0][][] */ -29,2,-45,46,-12,17,-42,-45, 38,126,64,50,74,-56,-115,-52, 37,53,127,-114,47,-92,-59,-19, 
  /* [2][1][][] */ -104,0,-85,52,-31,11,-33,-36, 34,12,23,-75,11,-49,-118,-3, 40,33,15,-112,3,-69,-29,5, 
  /* [2][2][][] */ -70,13,-56,51,23,-17,-33,-43, 3,21,28,13,87,-45,-103,-10, 9,-13,112,-48,34,-72,-38,-8, 
  /* [3][0][][] */ 28,-66,58,-86,-110,-2,3,-53, -24,-56,5,-80,-39,-58,-11,-32, -1,-3,15,4,14,8,-2,3, 
  /* [3][1][][] */ 40,-56,2,-68,-98,9,13,-77, -4,-26,-11,-65,-24,-127,-15,-31, 7,25,1,27,18,14,-5,16, 
  /* [3][2][][] */ 49,-90,44,-85,-74,-7,14,-120, -24,-51,7,-33,-15,-90,-9,-24, 13,10,-6,22,2,8,5,13, 
  /* [4][0][][] */ -87,-127,-59,-23,-123,-34,13,42, -108,-71,-39,-34,-111,34,-41,49, 10,-41,-77,-22,-24,30,14,21, 
  /* [4][1][][] */ -80,-77,-46,16,-108,19,73,-1, -77,-85,-8,-98,-108,-50,-26,4, -30,-54,-49,-56,-53,-12,30,-8, 
  /* [4][2][][] */ -41,-94,-61,-12,-59,31,-5,57, -39,-75,-28,-90,-17,-79,67,-62, -85,-55,-38,-68,-24,-35,2,-15, 
  /* [5][0][][] */ 1,90,23,-22,1,-92,17,-7, 11,27,29,-112,26,-67,-121,1, -21,13,-18,-89,1,-12,-18,26, 
  /* [5][1][][] */ -61,14,-32,17,45,-117,16,-15, -22,17,-16,-45,26,-74,-127,21, -42,13,-21,-38,7,-6,-6,28, 
  /* [5][2][][] */ -51,37,-12,-5,16,-87,31,-6, -28,32,-6,-80,19,-69,-67,19, -22,17,-27,-52,4,8,0,26, 
  /* [6][0][][] */ 27,-23,26,6,-14,9,-47,30, 72,-4,-41,-19,-24,-7,15,-91, 23,45,15,-19,20,-22,-35,55, 
  /* [6][1][][] */ -1,-24,39,-45,-24,-5,-26,18, 3,-43,-19,-1,-44,-4,9,-111, 20,4,15,-5,5,-12,-15,18, 
  /* [6][2][][] */ 34,-34,37,-32,-22,16,-13,16, 62,-35,-43,-24,-14,-6,20,-127, 22,4,14,-16,18,-6,-28,28, 
  /* [7][0][][] */ -94,-31,-78,-2,-45,17,-28,9, -17,-32,-101,-3,-25,-4,6,61, -43,-16,-1,-3,-18,-1,52,18, 
  /* [7][1][][] */ -101,-50,-83,4,-56,7,13,14, -39,-44,-127,4,-42,7,1,-24, -40,-20,6,4,-15,-3,-21,25, 
  /* [7][2][][] */ -107,-62,-118,-18,-28,-19,-109,39, -53,-68,-72,-37,-36,3,4,-19, -40,-18,8,12,-17,8,55,36, 
  /* [8][0][][] */ 8,-30,127,-60,6,-58,13,-70, 1,-22,-64,-5,-4,55,-33,28, 2,19,5,28,-1,44,21,-60, 
  /* [8][1][][] */ 57,-32,-28,-65,5,-73,21,-72, 39,-26,-33,-8,-10,-1,-29,12, 17,-7,-10,38,-27,24,22,-36, 
  /* [8][2][][] */ 29,-31,102,-73,-8,-65,33,-68, 13,-11,-25,8,-18,67,-42,36, -19,16,-9,35,9,21,41,-25, 
  /* [9][0][][] */ -43,-11,11,-1,13,50,-20,42, -4,8,7,1,21,-3,59,44, 19,-7,-39,25,-16,18,8,18, 
  /* [9][1][][] */ -50,-16,18,-4,-12,39,-22,9, -9,10,17,11,13,13,-15,20, 26,8,-90,17,-22,-8,32,-112, 
  /* [9][2][][] */ -50,-13,4,-4,6,22,-49,40, -7,10,19,22,11,15,-21,25, 27,-2,-65,22,-17,-23,34,-127, 
  /* [10][0][][] */ 16,-2,0,-19,-15,-101,59,-43, 9,-23,12,-10,-26,-64,-6,24, -92,-47,9,-29,-44,-21,-70,-21, 
  /* [10][1][][] */ 13,-12,-14,-28,1,-88,-14,7, 5,-31,12,-20,-25,-45,-2,47, -77,-52,4,-13,-33,-4,-127,-9, 
  /* [10][2][][] */ 1,0,-2,-7,-5,-25,58,36, -6,-21,7,-17,-14,-20,-4,-13, -19,-22,-6,-3,-9,11,-98,31, 
  /* [11][0][][] */ -15,25,29,8,17,3,-13,-22, 58,33,15,-9,40,-99,0,-24, -66,-6,-77,52,-22,7,-2,-60, 
  /* [11][1][][] */ 15,23,-3,6,7,-6,-16,-32, 7,-23,-4,-3,16,-127,-7,-58, -60,-18,-76,33,-31,-1,-8,-69, 
  /* [11][2][][] */ 5,24,23,-1,20,-8,-16,-56, 20,25,15,5,4,-68,20,-31, -20,1,-81,17,-13,-4,1,-52, 
  /* [12][0][][] */ -80,-57,-22,-35,-64,-26,-38,-9, 7,-89,-14,-63,-59,31,2,-40, -19,-14,9,-1,-9,-6,-22,-10, 
  /* [12][1][][] */ -110,-52,-70,-27,-36,-19,-42,13, -12,-36,-3,-67,-65,-2,11,-13, 2,-3,-3,-5,-3,-18,-33,0, 
  /* [12][2][][] */ -43,-82,-27,-41,-26,-12,-127,1, 13,-106,-14,-63,-34,38,10,-25, -4,-13,4,-13,-6,15,-26,-3, 
  /* [13][0][][] */ -97,-112,-80,-29,-102,15,14,-25, -43,-65,-96,29,-57,21,1,-18, -8,-15,-38,6,-12,14,22,19, 
  /* [13][1][][] */ -120,-113,-126,27,-124,15,1,34, -65,-57,-127,-56,-66,-8,27,50, -27,-28,-7,-33,-18,-7,0,9, 
  /* [13][2][][] */ -77,-98,-111,-35,-100,16,42,16, -73,-65,-100,40,-81,-7,-33,-14, -29,-6,-19,19,-18,2,22,11, 
  /* [14][0][][] */ 17,16,22,22,-5,57,-11,-45, -19,25,28,-66,0,-115,18,-36, 0,9,56,-76,11,-39,-60,32, 
  /* [14][1][][] */ 18,-4,-5,15,27,8,-11,-8, -10,28,0,-49,22,-127,19,-20, -2,-3,-14,-78,21,-11,-52,14, 
  /* [14][2][][] */ 15,2,11,37,27,41,-26,29, 5,17,1,3,17,-62,-9,3, 7,1,41,-66,25,-2,-43,24, 
  /* [15][0][][] */ -24,-41,32,-26,-31,-20,-122,67, 28,-35,4,-25,-33,14,24,-55, -26,-14,5,-22,-17,-90,-8,5, 
  /* [15][1][][] */ -5,-33,10,-23,-24,11,-116,-15, 2,-43,3,-28,-32,48,11,-56, -24,-40,9,-16,-10,-127,5,-1, 
  /* [15][2][][] */ 4,-13,14,-41,-19,-22,-85,60, 27,-30,-1,-39,-36,-3,17,-71, -31,-4,9,-4,-8,-107,-3,-5, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant16_scale = { 16, { 0.0058292546309530735, 0.006618177518248558, 0.002250714460387826, 0.0059129814617335796, 0.0037451975513249636, 0.0044650053605437279, 0.0051300162449479103, 0.0056355539709329605, 0.0038203482981771231, 0.0052848951891064644, 0.0055686673149466515, 0.0052892365492880344, 0.006911836564540863, 0.0052495542913675308, 0.0052201305516064167, 0.0052789589390158653, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[16] = { -2457, -2632, -1403, -389, 2646, -1112, -3279, -205, -5223, -5432, 621, -738, 2369, 520, -4541, 924, };
const TfArray<1, int> tensor_dimension17 = { 1, { 16 } };
const TfArray<16, float> quant17_scale = { 16, { 0.0001071395818144083, 0.00012163969222456217, 4.1367311496287584e-05, 0.0001086784468498081, 6.8835368438158184e-05, 8.206517668440938e-05, 9.4287832325790077e-05, 0.00010357943392591551, 7.0216614403761923e-05, 9.7134448878932744e-05, 0.00010235008085146546, 9.7214244306087494e-05, 0.00012703704123850912, 9.6484895038884133e-05, 9.5944102213252336e-05, 9.7025345894508064e-05, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension20 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension22 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[4] = { 0, 9, 0, 0, };
const TfArray<1, int> tensor_dimension24 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[4] = { 0, -22, 0, 0, };
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension26 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,18,13,1 } };
const TfArray<1, float> quant27_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant27_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension28 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,19,13,1 } };
const TfArray<1, float> quant29_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant29_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,19,13,8 } };
const TfArray<1, float> quant30_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension31 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension32 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension33 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant34_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant35_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant36_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension37 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension38 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension39 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant40_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant41_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension42 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data43[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension43 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data44[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension44 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data46[4] = { 0, 21, 0, 0, };
const TfArray<1, int> tensor_dimension46 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data47[4] = { 0, -10, 0, 0, };
const TfArray<1, int> tensor_dimension47 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data48[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension48 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,18,13,1 } };
const TfArray<1, float> quant49_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant49_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data50[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension50 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,19,13,1 } };
const TfArray<1, float> quant51_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant51_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,19,13,8 } };
const TfArray<1, float> quant52_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data53[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension53 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data54[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension54 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data55[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension55 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant56_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant57_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data59[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension59 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data60[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension60 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data61[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension61 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant63_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data64[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension64 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data65[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension65 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data66[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension66 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant67_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data68[4] = { 0, 33, 0, 0, };
const TfArray<1, int> tensor_dimension68 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data69[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension69 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data70[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension70 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,16,13,1 } };
const TfArray<1, float> quant71_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant71_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data72[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension72 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,17,13,1 } };
const TfArray<1, float> quant73_scale = { 1, { 0.066980093717575073, } };
const TfArray<1, int> quant73_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant74_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data75[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension75 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data76[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension76 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data77[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension77 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,15,13,8 } };
const TfArray<1, float> quant78_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,8,7,8 } };
const TfArray<1, float> quant79_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data80[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension80 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant81_scale = { 1, { 0.018379636108875275, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant82_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data83[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension83 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data84[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension84 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data85[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension85 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant86_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant87_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant88_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data89[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension89 = { 1, { 2 } };
const TfArray<2, int> tensor_dimension90 = { 2, { 1,832 } };
const TfArray<1, float> quant90_scale = { 1, { 0.011132621206343174, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data91[4*832] = { 
  -74, -24, -2, 85, -14, -48, 32, -71, 46, -19, -41, -27, 21, -50, -21, 49, -9, 0, 34, -18, -15, 12, 1, -50, -14, 8, 17, 1, -54, -45, 45, -2, -56, 11, -94, 21, -10, 2, 30, -11, 30, -11, 27, -1, 4, -3, 20, 42, -62, -5, -10, 13, 22, -115, -15, -11, -12, -16, -19, -80, -7, 21, -14, 13, -54, -86, -1, 70, -30, -27, 23, -56, 27, -7, -19, -6, 31, -31, -12, 26, -19, -19, 12, -2, -19, 24, 15, -26, -2, 12, 20, -9, -85, -33, 31, -2, -51, -7, -42, 26, -9, -5, 19, 6, 19, 15, 11, -3, 11, -2, 0, 30, -39, -24, 5, 11, 6, -17, -12, -18, -17, -22, 0, -34, -46, 8, -26, 6, -94, -102, -3, 66, -29, -40, 30, -57, 34, -18, -27, 0, 26, -38, -25, 45, 4, -8, 26, 3, -19, 32, 4, -19, -14, -4, 35, -14, -60, -43, 42, -6, -57, -2, -38, 24, 0, 6, 36, 16, 26, 1, 22, -1, 5, -2, 6, 26, -12, -4, -3, 8, 15, -20, -41, -19, -27, -1, -2, -45, -32, 36, -25, 2, -75, -96, 5, 61, -42, -17, 12, -50, 46, -25, -25, -18, 24, -40, -28, 42, -21, -21, 10, -8, 0, 25, -8, -2, -25, -21, 19, -29, -51, -6, 39, -3, -33, -14, -48, 31, 0, 11, 45, 31, 26, 12, 20, 6, 1, 7, -16, 36, -30, -4, -7, 36, 19, -16, -88, 15, -61, 23, 4, -47, -38, 4, -31, -2, -66, -78, 3, 60, -58, -5, 29, -51, 39, 3, -30, -8, 33, -61, -35, 38, -2, -3, 22, 3, -5, 34, 15, -8, -33, -34, 18, -14, -49, -18, 41, 0, -16, -6, -50, 23, 1, -8, 54, 49, 29, 15, 23, 13, -34, 31, -37, 26, -7, -13, 10, 19, 6, -13, -98, 27, -42, 38, -3, -40, -26, 26, -14, 5, -69, -91, 2, 82, -58, -4, 27, -47, 44, 8, 0, -30, 27, -75, -35, 58, -5, -1, 25, -13, -19, 6, -1, 16, -31, -5, 21, 0, -53, -22, 44, 7, -1, -3, -29, 37, 8, -5, 60, 64, 50, 6, 32, 12, -26, 17, -28, 18, -22, -8, 19, 22, 9, -36, -81, 35, -1, 55, -2, -13, -37, 39, -5, -1, -68, -81, 2, 89, -58, 6, 26, -61, 55, 1, -3, -13, 43, -103, -31, 60, 20, -7, 19, -12, -19, 32, 8, 4, -21, -16, 5, -11, -60, -38, 25, -1, -5, -9, -45, 47, -3, -13, 51, 48, 51, 2, 12, 18, -47, 22, -35, 27, -32, -19, 44, 29, 4, -8, -49, 30, 12, 58, 11, -36, -43, 19, -81, -1, -84, -95, 9, 88, -57, 25, 45, -45, 62, -12, -1, -16, 36, -73, -29, 64, -3, -5, 19, 1, -18, 15, -1, -11, -31, -7, 10, -22, -56, -22, 38, 8, -3, -14, -54, 22, 2, -17, 50, 20, 38, 22, 17, 0, -52, 36, -8, 24, 11, -13, 1, 53, 10, 5, -63, 67, 40, 36, 16, -38, -29, 26, -89, 4, -83, -97, -9, 79, -62, 34, 28, -65, 32, -29, -16, -52, 20, -62, -29, 56, -7, 1, 19, 8, -23, 22, 8, -20, -31, -42, 18, -11, -46, -15, 31, 3, -13, -10, -43, 24, -14, 2, 55, 25, 41, 10, 12, 7, -37, 26, -17, 25, -34, -20, 27, 17, 7, 20, -76, 43, 30, 47, -1, -23, -10, 17, -81, 14, -77, -76, -5, 52, -38, 28, 20, -87, 35, -27, -24, -16, 26, -55, -25, 39, -30, -7, 34, 2, -36, 18, -11, -27, -18, -5, 11, -5, -61, -60, 31, -9, -35, -8, -54, 25, -11, -4, 30, 7, 31, 8, 22, 20, -34, 8, 4, 25, -41, -15, 15, 4, -3, -25, -76, 25, 33, 30, 12, -37, -14, 16, -106, -10, -73, -51, 2, 56, -41, 38, 23, -81, 39, -17, -25, -11, 30, -28, -22, 34, -44, -2, 21, -13, -34, 18, 2, -22, -24, 11, 11, -4, -49, -44, 20, -16, -39, 0, -33, 27, -4, -4, 19, 19, 27, 4, 23, 20, -27, 2, -2, 11, -32, -1, 4, 23, 5, 10, -52, 18, 16, -3, -3, -39, -23, 20, -72, -4, -72, -3, -2, 55, -23, 26, 22, -91, 34, -18, -17, -23, 26, -27, -10, 54, -68, -3, 31, -2, -43, 17, 6, -16, -6, -7, -6, -23, -32, -46, 42, -33, -39, 6, -62, 24, -3, -12, 21, 2, 26, -9, 8, 33, -25, -15, 5, 16, -44, 3, 17, -4, 5, 1, -54, 2, 1, 3, -4, -45, -11, 6, -85, -5, -71, 34, -12, 57, -16, 27, 3, -48, 66, -15, -12, -6, 1, -27, 9, 44, -61, -27, 26, -2, -20, -8, -1, -19, -19, -5, 2, -7, -30, -57, 42, -13, -76, 26, -53, 22, -11, -8, 23, 6, 29, -1, 15, 17, -15, -3, -22, 14, -78, -47, 1, 5, 0, 9, -19, 10, 18, 6, 12, -48, -16, 18, -110, 1, 
  24, -31, -18, -54, 22, -25, -62, 38, -43, 13, 39, 5, 32, 30, -36, 3, -14, -1, -67, 13, 10, -40, 14, -26, -15, -22, 7, -37, 24, 1, -37, -15, -9, -1, 10, -15, 10, 1, -37, -28, -15, -8, 3, -43, 10, -14, 4, -18, -52, 13, 33, -9, 11, 3, 15, -57, -5, 3, 1, -2, -1, -15, 39, 17, 7, -25, -12, -27, 12, -12, -38, 19, -45, 36, 28, 28, 12, 6, -29, -14, 0, 6, -39, 9, -12, -26, 12, -8, -1, -6, 3, -16, 5, -13, -31, -19, 16, 1, 11, -6, -2, -3, -26, -24, -5, 14, -1, -28, 14, -12, 28, -8, -24, 8, -18, -32, -1, 11, 36, -58, -14, 11, 6, 36, 0, -7, 2, -4, 26, -33, -14, -25, 19, -31, -44, 15, -27, 50, 23, 24, 16, 7, -37, 0, -8, 4, -40, 11, -11, -20, 19, -10, 12, -3, 6, -22, 14, -23, -26, 4, 7, 3, 11, -1, 2, -8, -21, -9, -23, 13, 9, -33, 22, -23, 22, -4, -4, -2, 4, -45, -8, 10, 36, -41, -24, 23, -4, 26, -10, -24, 4, 2, 22, -33, -24, -21, 15, -33, -47, 25, -25, 62, 40, 19, 5, -2, -31, -16, -6, -1, -30, 2, -27, -11, 17, -22, 21, 13, -1, -18, 11, -16, -36, 1, 16, 11, 10, -17, 0, -13, -25, -24, -8, 33, 9, -25, 1, -22, 18, 7, -12, 17, 12, -25, -15, 15, 65, -32, -4, -1, -12, 43, -6, -16, 29, -11, 27, -41, -22, -14, 24, -30, -51, 13, -12, 63, 68, 22, 18, 8, -28, -6, 0, -5, -18, -2, -7, -23, 25, 8, 24, 25, 14, -24, 38, -23, -30, 5, 4, 3, 17, -25, -7, -9, -18, -21, -19, 38, 18, -22, 16, -22, 27, 22, -34, 1, 16, -17, -28, 10, 80, -23, 6, -12, 1, 46, 2, -18, 45, 27, 25, -43, -26, -31, 19, -8, -34, 20, -23, 63, 59, 20, -2, 0, -24, -22, 0, -7, -28, 6, -9, -31, 23, -25, 10, 9, 6, -12, 14, -22, -40, 9, 31, -1, 7, -12, 5, 10, -22, -6, -10, 36, 25, -20, -10, -15, 18, 18, 17, 9, -9, -1, -11, 12, 79, -42, 17, -21, -7, 44, 1, -13, 41, 2, 15, -46, -24, -8, 26, -35, -49, 19, -29, 52, 60, 37, 4, 2, -25, -13, -8, 9, -44, -4, -5, -20, 27, -23, 8, 8, 15, -21, -4, -8, -26, 30, 29, 2, 8, -15, 10, 5, -20, -25, 10, 36, 19, -26, 12, -9, 26, 11, 7, -2, -26, -35, -4, -5, 61, -55, 0, -7, 15, 50, 6, -23, 52, -1, 39, -40, -14, -10, 5, -37, -45, 21, -13, 52, 64, 27, 5, 0, -41, -5, 6, 6, -56, -8, 4, -43, 14, -5, 31, 29, -8, -11, 18, -19, -31, 7, 14, 0, 16, 15, -1, 4, -25, 6, -11, 28, 23, -28, 19, -16, 13, 21, 19, 4, 1, -39, -2, -7, 65, -45, 17, 5, -10, 54, -9, -35, 55, 8, 37, -33, -24, 4, 16, -38, -52, 2, -32, 60, 45, 27, 0, -5, -32, -14, -1, 3, -37, -3, 8, -24, 21, -8, 8, 1, -1, -23, 2, -19, -32, 13, 14, 9, 20, -10, 10, 13, -31, -22, -20, 26, 9, -30, 10, -33, 27, 9, 0, -4, -8, -25, -15, 8, 39, -31, 10, 5, 14, 24, 6, -34, 57, 0, 32, -46, -23, -3, 26, -31, -51, 26, -28, 49, 32, 17, 7, 5, -38, 10, -13, 5, -33, -9, -1, -35, 12, -19, 7, -2, -14, -24, 4, -15, -28, 13, 6, -1, 13, -2, 4, 2, -29, -12, -11, 17, 26, -19, 15, -32, 5, 3, -11, 8, -4, -9, -7, 13, 29, -19, 6, 12, 11, 23, -7, -24, 28, -8, 27, -42, -16, -18, 26, -45, -49, 21, -16, 28, 27, 5, 3, 16, -35, -9, -2, 8, -40, -14, -21, -26, 18, -14, 6, -3, -4, -16, 14, -15, -23, 8, -3, 3, 22, -4, -5, -6, -8, -20, -11, 6, 23, -24, -12, -28, 16, -6, -28, -6, 4, -22, -14, 8, 24, -28, -8, -7, 10, 17, -12, -25, 17, -9, 24, -37, -13, -8, 2, -38, -45, 11, -36, 17, 24, 8, 15, -12, -66, 8, -18, 5, -48, 6, -2, -30, 11, -18, 0, 4, -11, -27, 6, -12, -18, 1, 11, 3, 18, -15, -9, 1, -5, -23, -16, 0, 19, -38, 1, -24, 16, -18, -38, 7, 0, -22, -3, 8, 14, -32, -4, -12, 5, 23, 6, -29, -3, -8, 26, -58, -20, -31, -2, -36, -43, 19, -41, 17, 39, 5, 6, 3, -48, 1, -5, -10, -42, 0, -14, -42, -17, -28, 10, 1, -24, -11, 22, -5, -14, 14, -11, 2, 14, 7, -4, -28, -11, -20, -11, -12, 10, -41, 28, -42, -2, -17, -32, 5, 13, -29, 5, -20, 8, -22, 2, 19, -7, 11, 11, -33, -5, -3, 
  4, 41, 2, -81, 36, -11, 16, 19, 27, 31, 35, -13, -10, 40, 31, 19, -15, 4, -29, 30, -53, -21, -1, -61, 25, -30, -48, 16, 4, -27, -20, -21, -1, 0, 91, -25, -78, -27, -20, -71, -30, -32, -106, 41, -41, -69, -29, -94, 31, 10, -3, -26, -88, 112, -71, -5, 1, -1, 2, 50, -72, -54, -11, -63, 1, 74, 8, -50, 43, -43, 31, 26, 5, 10, 26, -69, 5, 46, 24, 11, -2, 11, -5, 14, -9, -28, -25, -44, 36, -3, -38, 23, 48, -28, 10, -25, -10, 2, 29, -27, -58, -8, -16, -46, -27, -33, -61, 6, -72, -39, -11, -59, -5, -9, 15, 12, -44, -15, -43, 30, 9, 37, -24, 8, -22, -21, 9, -27, 2, 99, 1, -19, 56, -47, 31, 25, 10, 5, 23, -72, 7, 40, 28, 13, -1, 7, 8, 17, -10, -13, -5, -32, 16, -7, -53, 20, 37, -22, 2, -12, 3, 14, 38, -31, -57, -10, -17, -63, -32, -37, -49, 12, -69, -66, 4, -56, 2, 5, 28, 4, -36, 24, -53, 14, -2, -10, -17, 31, -17, 0, 10, -33, -9, 91, -1, -32, 62, -45, 36, 31, 3, -8, 3, -74, 1, 61, 25, 13, -7, 6, -8, -3, -9, -25, -18, -25, 22, 8, -64, 5, 25, -25, -3, -26, -23, 1, 42, -36, -75, -5, -15, -59, -28, -43, -57, 15, -75, -47, -12, -41, 2, 7, 38, -18, -51, 22, -48, -9, -13, 12, -29, 31, -33, -38, 4, -31, -6, 90, -1, -32, 74, -42, 20, 42, -17, -28, -7, -57, 13, 73, 28, 8, -28, 12, 7, 4, -16, -21, -11, -25, 15, 34, -50, 15, 16, -33, 7, -6, -12, 12, 36, -34, -67, -16, -40, -89, -45, -52, -66, 13, -68, -57, -1, -63, -7, 8, 27, -20, -35, 11, -10, 18, -12, -15, -11, 20, -18, -34, -27, -38, 10, 85, 2, -23, 72, -62, 33, 60, -3, -33, -18, -64, 3, 71, 15, 13, -24, 9, 15, 6, -13, -18, -30, -27, 26, 22, -53, 19, 23, -3, 12, 0, -42, 9, 36, -26, -75, -19, -18, -65, -29, -50, -56, 2, -67, -41, -15, -63, -32, -2, 13, -4, -40, 7, -87, 28, -19, -15, -33, 21, -41, -22, -48, -53, 2, 94, 1, -24, 72, -72, 7, 51, 14, -16, -26, -83, 6, 65, 13, 16, -24, 18, 1, 12, -9, -21, -13, 7, 35, 19, -43, 38, 19, -16, -10, -21, -10, -1, 27, -25, -43, 10, -23, -64, -42, -66, -56, 21, -77, -44, -8, -56, -7, 1, 23, -21, -33, 18, -60, -1, -37, -33, -18, 29, -28, -13, -18, -39, -17, 88, 1, -26, 69, -63, 2, 58, -6, -19, -15, -67, 0, 68, 19, 0, 1, -5, -9, 13, -17, -19, 6, -1, 28, 20, -51, 16, -9, -15, 15, -11, -27, -5, 47, -29, -69, -8, -29, -72, -31, -56, -57, 11, -65, -55, 12, -74, -24, 4, 29, 1, -40, 9, -49, -25, -48, -46, -14, 30, -55, -4, -24, -53, -27, 103, -10, -28, 58, -57, 26, 47, -17, -13, -1, -51, 5, 58, 29, 0, -27, 22, 10, 19, -4, -16, -8, -10, 15, 17, -66, 23, 22, -17, -9, -7, 3, 11, 33, -29, -63, -21, -13, -58, -31, -63, -73, 19, -40, -52, -8, -73, -13, 6, 28, -30, -40, -3, -23, 3, -33, -8, 3, 25, -28, -17, -27, -22, -18, 82, 4, -37, 63, -58, 7, 45, -3, 4, -7, -55, 16, 66, 29, 17, 4, 23, 0, 15, -21, -26, -12, -19, 11, 4, -57, 16, 35, -18, 13, -7, 2, 1, 21, -13, -52, -5, -26, -58, -25, -59, -51, 25, -61, -62, -4, -65, 15, 0, 38, -27, -42, 5, -8, 17, 9, -30, -9, 53, -33, -14, 0, -28, -32, 57, 2, -58, 51, -53, 10, 32, 13, -6, 13, -60, 4, 64, 24, 3, -16, 21, 2, 16, -6, -14, -15, -12, 19, 7, -66, 30, 40, -16, -12, 5, -4, -2, 32, -22, -56, -11, -19, -66, -23, -52, -35, 18, -62, -47, 3, -58, -1, -11, 20, -8, -38, 11, -5, 38, -8, -21, -1, 10, -24, -15, 5, -11, -25, 34, 9, -40, 51, -60, 3, 48, -2, 5, 23, -59, 6, 29, 21, 5, 2, 17, -1, 5, 7, -22, -16, -21, 26, 1, -42, 31, 42, -8, 0, 3, -16, -3, 30, -32, -48, 4, -18, -71, -29, -53, -46, 25, -55, -33, -15, -71, 15, -4, 33, -4, -24, 0, -40, 11, -19, -5, -16, 16, -24, 3, 47, -23, -15, 25, 10, -41, 10, -66, -2, 10, -26, 13, 17, -39, 4, 10, 7, 2, -12, 29, 0, 9, -14, -3, -29, -26, 13, -22, -57, 32, 21, -65, -21, 0, -21, -31, 30, -14, -34, 0, -26, -30, -36, -54, -51, 16, -4, -64, -18, -50, 21, -3, 40, -4, -14, 4, -17, -18, -38, -28, -18, 29, -3, -43, 110, -13, 
  37, 22, 12, -20, -83, 35, 12, -27, -45, -74, -42, 31, -80, -68, 36, -97, 44, -16, 18, 0, 49, 23, -29, 73, 6, 10, 15, 15, -41, 69, -19, -2, 58, -8, -46, -15, 47, -13, -10, 51, -15, 28, 26, 1, 1, 54, -19, 12, 101, -12, -18, 21, 22, -60, 38, 43, 3, 9, 28, -2, 16, 24, -32, 13, 31, 20, 16, -20, -82, 72, -4, -33, -23, -76, -50, 29, -93, -59, 14, -79, -2, 0, 1, 3, 37, 7, -18, 59, -25, 14, 6, -11, -33, 39, -23, -14, 21, -10, 4, -8, 27, 5, -6, 21, -13, 13, 19, 8, 7, 31, 7, 13, 71, 6, -38, 14, 20, -14, 3, 29, 23, -34, 40, -17, 70, -2, -5, -17, 56, 26, 9, -54, -84, 79, 4, -40, -21, -62, -74, 35, -93, -47, 33, -71, 30, -29, 5, 2, 35, 34, -29, 50, -20, 3, 10, -8, -39, 32, -6, -1, 15, -31, -2, -1, 26, 10, -3, 26, -15, 15, 20, 12, 20, 29, 15, 4, 43, 10, -71, 17, 15, -15, 35, 43, 56, -30, 12, -29, 83, 15, -32, 7, 59, 11, 27, -63, -87, 71, -15, -21, -43, -94, -102, 46, -83, -36, 15, -82, 20, -28, -1, 5, 30, 8, -28, 37, -43, 6, -5, -3, -31, 46, -24, -4, 0, -3, -17, 17, 30, 2, -52, 16, -3, -12, 32, -11, 12, 28, -25, -2, 38, -2, -53, 12, 18, -22, 51, 33, 37, -55, 15, -41, 61, 20, -24, 10, 34, 35, 6, -64, -62, 59, -8, -32, -55, -83, -101, 39, -73, -34, 3, -93, 13, -7, -1, -13, 20, 19, -24, 19, -31, -41, 17, -7, 0, 43, -8, 0, -8, -7, -15, -2, 17, -5, -44, 18, 8, -28, -9, -3, 38, 15, -16, -11, 26, -3, -66, 5, 17, -5, 27, 2, 42, -52, 15, -63, 43, 13, -37, 1, 13, 14, 19, -88, -74, 58, -44, -59, -66, -105, -107, 34, -75, -12, 12, -127, -11, -2, 8, -9, 27, 4, -21, 36, -46, -59, 7, 6, 30, 32, -19, -5, -9, -8, -26, 2, 17, 17, -17, 9, -3, -40, -17, -20, 64, 25, -24, -16, 33, 5, -50, -11, 9, -40, 34, -22, 14, -51, 12, -57, 57, -12, 1, 29, 27, 38, 17, -89, -65, 55, -28, -45, -73, -114, -110, 43, -51, -25, 31, -113, 2, 8, -3, -22, 18, 11, -33, 8, -51, -41, 3, -8, 36, 38, 1, -18, -23, -8, -12, -28, 17, 5, -33, 12, -18, -13, -2, -9, 70, 26, -7, -5, 10, -6, -59, 12, 25, -10, 30, -22, -4, -40, 12, -62, 48, -3, 3, 9, 29, -3, 18, -74, -50, 15, -3, -47, -54, -84, -97, 42, -35, -69, 27, -113, 29, -11, 0, -20, 22, 14, -39, 19, -31, -39, 24, 5, 37, 26, -24, -11, -6, -14, -11, -14, 31, 13, -33, 24, -15, -27, -25, -2, 77, 19, -19, -4, -3, -11, -71, -9, 8, -32, 23, -20, -42, -24, 8, -60, 42, 9, 14, 21, 35, 13, 12, -70, -77, 37, -3, -54, -24, -82, -103, 40, -56, -44, 22, -116, 11, -9, 3, -23, 19, 2, -22, 33, -15, -27, 31, 1, -15, 27, -16, -11, -3, 3, -7, -26, 36, 11, -25, 8, -9, -1, 6, -6, 32, 33, 7, 21, 1, -21, -54, 2, 32, -7, 45, -9, -64, -70, 0, -39, 43, 1, 19, 22, 47, 18, 15, -53, -66, 25, 11, -40, -34, -47, -71, 52, -73, -78, 18, -95, 32, -5, 4, -3, 40, 13, 3, 30, -8, 7, 50, -3, -27, 34, -10, -22, 20, -10, -10, -26, 42, 21, -8, 25, -16, 13, 7, -15, 39, 36, -14, 22, 38, -3, -62, -7, 27, -26, 60, -12, -69, -51, 13, -30, 33, 5, 39, 5, 42, 7, 19, -46, -60, 40, -5, -32, -20, -45, -42, 26, -85, -37, 25, -76, 59, -22, 6, -21, 52, 13, -8, 41, -21, -4, 53, -8, -20, 46, -26, -19, 25, 3, -25, -17, 32, 17, 9, 34, 20, 29, -11, -31, 35, 44, -30, 23, 63, -13, -58, 3, 18, -16, 30, -23, -34, -10, 8, 0, 41, 20, 44, 12, 48, -6, 21, -24, -70, 26, -6, -8, -47, -17, -49, 43, -76, -36, 32, -63, 60, -12, 16, -40, 34, 21, -4, 31, -22, 19, 52, -13, -2, 57, -33, -19, 32, -10, -13, -14, 45, 28, -4, 40, 19, 21, 4, -21, 54, 43, -6, 20, 89, 8, -88, 23, 13, -68, 44, -9, -15, -20, 16, -18, 13, 8, 47, 22, 56, -60, 14, 13, -16, 44, 19, 17, -64, -36, -96, 14, -50, -24, -7, -42, 46, -19, -1, -68, 33, 19, -1, 28, -19, 36, 44, -27, -23, 58, -56, 1, 65, -23, -11, -36, 23, 4, -1, 36, -3, 30, -4, -37, -2, 68, 12, 23, 70, 35, -80, 39, 2, -2, 51, 27, 4, -14, -11, 1, -17, 31, -20, -11, 
};
const TfArray<2, int> tensor_dimension91 = { 2, { 4,832 } };
const TfArray<1, float> quant91_scale = { 1, { 0.0058004194870591164, } };
const TfArray<1, int> quant91_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data92[4] = { -9750, 13550, 3195, -8694, };
const TfArray<1, int> tensor_dimension92 = { 1, { 4 } };
const TfArray<1, float> quant92_scale = { 1, { 6.4573876443319023e-05, } };
const TfArray<1, int> quant92_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,4 } };
const TfArray<1, float> quant93_scale = { 1, { 0.082261346280574799, } };
const TfArray<1, int> quant93_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 3 } };
const TfLiteStridedSliceParams opdata1 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs1 = { 4, { 3,4,5,6 } };
const TfArray<1, int> outputs1 = { 1, { 7 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 7,8,9 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteStridedSliceParams opdata4 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs4 = { 4, { 11,12,13,14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 15,16,17 } };
const TfArray<1, int> outputs5 = { 1, { 18 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 18 } };
const TfArray<1, int> outputs6 = { 1, { 19 } };
const TfLiteStridedSliceParams opdata7 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs7 = { 4, { 19,20,21,22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteStridedSliceParams opdata8 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs8 = { 4, { 3,24,25,26 } };
const TfArray<1, int> outputs8 = { 1, { 27 } };
const TfArray<2, int> inputs9 = { 2, { 27,28 } };
const TfArray<1, int> outputs9 = { 1, { 29 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 29,8,9 } };
const TfArray<1, int> outputs10 = { 1, { 30 } };
const TfLiteStridedSliceParams opdata11 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs11 = { 4, { 30,31,32,33 } };
const TfArray<1, int> outputs11 = { 1, { 34 } };
const TfLitePoolParams opdata12 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs12 = { 1, { 34 } };
const TfArray<1, int> outputs12 = { 1, { 35 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 35,16,17 } };
const TfArray<1, int> outputs13 = { 1, { 36 } };
const TfLiteStridedSliceParams opdata14 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs14 = { 4, { 36,37,38,39 } };
const TfArray<1, int> outputs14 = { 1, { 40 } };
const TfLitePoolParams opdata15 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs15 = { 1, { 40 } };
const TfArray<1, int> outputs15 = { 1, { 41 } };
const TfLiteStridedSliceParams opdata16 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs16 = { 4, { 41,42,43,44 } };
const TfArray<1, int> outputs16 = { 1, { 45 } };
const TfLiteStridedSliceParams opdata17 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs17 = { 4, { 3,46,47,48 } };
const TfArray<1, int> outputs17 = { 1, { 49 } };
const TfArray<2, int> inputs18 = { 2, { 49,50 } };
const TfArray<1, int> outputs18 = { 1, { 51 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 51,8,9 } };
const TfArray<1, int> outputs19 = { 1, { 52 } };
const TfLiteStridedSliceParams opdata20 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs20 = { 4, { 52,53,54,55 } };
const TfArray<1, int> outputs20 = { 1, { 56 } };
const TfLitePoolParams opdata21 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs21 = { 1, { 56 } };
const TfArray<1, int> outputs21 = { 1, { 57 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 57,16,17 } };
const TfArray<1, int> outputs22 = { 1, { 58 } };
const TfLiteStridedSliceParams opdata23 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs23 = { 4, { 58,59,60,61 } };
const TfArray<1, int> outputs23 = { 1, { 62 } };
const TfLitePoolParams opdata24 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs24 = { 1, { 62 } };
const TfArray<1, int> outputs24 = { 1, { 63 } };
const TfLiteStridedSliceParams opdata25 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs25 = { 4, { 63,64,65,66 } };
const TfArray<1, int> outputs25 = { 1, { 67 } };
const TfLiteStridedSliceParams opdata26 = { 13, 15, 0, 0, 0 };
const TfArray<4, int> inputs26 = { 4, { 3,68,69,70 } };
const TfArray<1, int> outputs26 = { 1, { 71 } };
const TfArray<2, int> inputs27 = { 2, { 71,72 } };
const TfArray<1, int> outputs27 = { 1, { 73 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 73,8,9 } };
const TfArray<1, int> outputs28 = { 1, { 74 } };
const TfLiteStridedSliceParams opdata29 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs29 = { 4, { 74,75,76,77 } };
const TfArray<1, int> outputs29 = { 1, { 78 } };
const TfLitePoolParams opdata30 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs30 = { 1, { 78 } };
const TfArray<1, int> outputs30 = { 1, { 79 } };
const TfArray<2, int> inputs31 = { 2, { 79,80 } };
const TfArray<1, int> outputs31 = { 1, { 81 } };
const TfLiteConvParams opdata32 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs32 = { 3, { 81,16,17 } };
const TfArray<1, int> outputs32 = { 1, { 82 } };
const TfLiteStridedSliceParams opdata33 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs33 = { 4, { 82,83,84,85 } };
const TfArray<1, int> outputs33 = { 1, { 86 } };
const TfLitePoolParams opdata34 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs34 = { 1, { 86 } };
const TfArray<1, int> outputs34 = { 1, { 87 } };
const TfLiteConcatenationParams opdata35 = { 1, kTfLiteActNone };
const TfArray<4, int> inputs35 = { 4, { 23,45,67,87 } };
const TfArray<1, int> outputs35 = { 1, { 88 } };
const TfLiteReshapeParams opdata36 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs36 = { 2, { 88,89 } };
const TfArray<1, int> outputs36 = { 1, { 90 } };
const TfLiteFullyConnectedParams opdata37 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs37 = { 3, { 90,91,92 } };
const TfArray<1, int> outputs37 = { 1, { 93 } };
const TfLiteSoftmaxParams opdata38 = { 1 };
const TfArray<1, int> inputs38 = { 1, { 93 } };
const TfArray<1, int> outputs38 = { 1, { 1 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3760), (TfLiteIntArray*)&g0::tensor_dimension3, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension7, 195, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension11, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension19, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4592), (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension27, 234, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension29, 247, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 1976, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension34, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension35, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension36, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension40, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension41, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4400), (TfLiteIntArray*)&g0::tensor_dimension45, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 234, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension51, 247, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 1976, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension56, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension57, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data61, (TfLiteIntArray*)&g0::tensor_dimension61, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension62, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension63, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data64, (TfLiteIntArray*)&g0::tensor_dimension64, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data65, (TfLiteIntArray*)&g0::tensor_dimension65, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data66, (TfLiteIntArray*)&g0::tensor_dimension66, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3344), (TfLiteIntArray*)&g0::tensor_dimension67, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data68, (TfLiteIntArray*)&g0::tensor_dimension68, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data69, (TfLiteIntArray*)&g0::tensor_dimension69, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data70, (TfLiteIntArray*)&g0::tensor_dimension70, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data72, (TfLiteIntArray*)&g0::tensor_dimension72, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1776), (TfLiteIntArray*)&g0::tensor_dimension73, 221, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension74, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data75, (TfLiteIntArray*)&g0::tensor_dimension75, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data76, (TfLiteIntArray*)&g0::tensor_dimension76, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data77, (TfLiteIntArray*)&g0::tensor_dimension77, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1776), (TfLiteIntArray*)&g0::tensor_dimension78, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension79, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data80, (TfLiteIntArray*)&g0::tensor_dimension80, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension81, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension82, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data83, (TfLiteIntArray*)&g0::tensor_dimension83, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data84, (TfLiteIntArray*)&g0::tensor_dimension84, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data85, (TfLiteIntArray*)&g0::tensor_dimension85, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension86, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension87, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension88, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data89, (TfLiteIntArray*)&g0::tensor_dimension89, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension90, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data91, (TfLiteIntArray*)&g0::tensor_dimension91, 3328, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data92, (TfLiteIntArray*)&g0::tensor_dimension92, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension93, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[39] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[39] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONCATENATION, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 94, };
const size_t tflNodes_subgraph_index[] = {0, 39, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  1, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_1585_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 94;
  for (size_t i = 0; i < 94; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_STRIDED_SLICE] = Register_STRIDED_SLICE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_CONCATENATION] = Register_CONCATENATION();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1585_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1585_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1585_invoke() {
  for (size_t i = 0; i < 39; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1585_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
